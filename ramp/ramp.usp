#INCLUDEPATH "C:\Users\artna\Documents\GitHub\ssharpnavsegda\Helper\bin\Debug"
#USER_SIMPLSHARP_LIBRARY "Helper"

ANALOG_INPUT PresetLevel;
ANALOG_OUTPUT LightLevel;
DIGITAL_OUTPUT _SKIP_, _SKIP_, Ramp_up, Ramp_down;
DIGITAL_INPUT _SKIP_, _SKIP_, Toggle_open, Toggle_close, Hold_open, Hold_close, Stop, Open_up, Close_down;
INTEGER_PARAMETER DelayTime, MaxVal;

#BEGIN_PARAMETER_PROPERTIES DelayTime
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 65535d;
   propDefaultValue = 1000d;
   propShortDescription= "DelayTime";
#END_PARAMETER_PROPERTIES
                               
#BEGIN_PARAMETER_PROPERTIES MaxVal
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 65535d;
   propDefaultValue = 10000d;
   propShortDescription= "MaxVal";
#END_PARAMETER_PROPERTIES

HelperClass myHelperClass;

Function Ramp(INTEGER rampTo)
{
   RAMP_INFO LightInfo;
   SIGNED_INTEGER status;
   
   LightInfo.rampTargetValue=rampTo;
   LightInfo.rampBaseValue=LightLevel;

   // Transition time of 10 seconds (1000 hundredths of a second)
   LightInfo.rampIsAbsolute = 1;
   LightInfo.rampLowerBound = 0;
   LightInfo.rampUpperBound = MaxVal;
   
   LightInfo.rampTransitionTime = ABS(myHelperClass.ComputeRamp(LightInfo.rampTargetValue - LightInfo.rampBaseValue, LightInfo.rampUpperBound - LightInfo.rampLowerBound, DelayTime));

   //LightInfo.rampTransitionTime = ABS(LightInfo.rampTargetValue - LightInfo.rampBaseValue);
   
   if (LightInfo.rampTargetValue <> LightInfo.rampBaseValue)
   {
	   Print("ramp time is %ld\n", LightInfo.rampTransitionTime);
	   CreateRamp(LightLevel, LightInfo);
	
	   if(LightInfo.rampTargetValue > LightInfo.rampBaseValue)
	   {
	      Ramp_up = 1;
	      Ramp_down = 0;
	   }
	   else
	   {
	      Ramp_up = 0;
	      Ramp_down = 1;
	   }
	   CancelAllWait();
	   Wait(LightInfo.rampTransitionTime, rampWait)
	   {
	      Ramp_up = 0;
	      Ramp_down = 0;
	   }
   }
}

Function Stop_func()
{
   StopRamp(LightLevel);
   Ramp_up = 0;
   Ramp_down = 0;
}

PUSH Stop
{
   Stop_func();
}

PUSH Toggle_open
{
   if(IsRamping(LightLevel) != 1)
   {
      if (LightLevel <> 0)
         Ramp(0);
   }
   else
   {
      Stop_func();
   }
}

PUSH Toggle_close
{
   if(IsRamping(LightLevel) != 1)
   {
      if (LightLevel <> MaxVal)
         Ramp(MaxVal);
   }
   else
   {
      Stop_func();
   }
}

PUSH Hold_open
{
   Ramp(0);
}

RELEASE Hold_open
{
   Stop_func();
}

PUSH Hold_close
{
   Ramp(MaxVal);
}

RELEASE Hold_close
{
   Stop_func();
}

PUSH Open_up
{
   Ramp(0);   
}

PUSH Close_down
{
   Ramp(MaxVal);
}

CHANGE PresetLevel
{
   Ramp(PresetLevel);
}




