#INCLUDEPATH "C:\Users\artna\Documents\GitHub\ssharpnavsegda\Helper\bin\Debug"
#USER_SIMPLSHARP_LIBRARY "Helper"

ANALOG_INPUT PresetLevel;
ANALOG_OUTPUT LightLevel[20];
DIGITAL_OUTPUT _SKIP_, Ramp_up, Ramp_down;
DIGITAL_INPUT _SKIP_, Toggle_up, Toggle_down, Hold_up, Hold_down;
INTEGER_PARAMETER DelayTime;

#BEGIN_PARAMETER_PROPERTIES DelayTime
   propValidUnits = unitDecimal;
   propDefaultUnit = unitDecimal;
   propBounds = 0d , 65535d;
   propDefaultValue = 1000d;
   propShortDescription= "DelayTime";
#END_PARAMETER_PROPERTIES

HelperClass myHelperClass;

Function Ramp(INTEGER rampTo)
{
   RAMP_INFO LightInfo;
   SIGNED_INTEGER status;
   
   LightInfo.rampTargetValue=PresetLevel;
   LightInfo.rampBaseValue=LightLevel[1];

   // Transition time of 10 seconds (1000 hundredths of a second)
   LightInfo.rampIsAbsolute = 1;
   LightInfo.rampLowerBound = 0;
   LightInfo.rampUpperBound = 10000;
   
   LightInfo.rampTransitionTime = ABS(myHelperClass.ComputeRamp(LightInfo.rampTargetValue - LightInfo.rampBaseValue, LightInfo.rampUpperBound - LightInfo.rampLowerBound, DelayTime));

   //LightInfo.rampTransitionTime = ABS(LightInfo.rampTargetValue - LightInfo.rampBaseValue);

   Print("ramp time is %ld\n", LightInfo.rampTransitionTime);
   CreateRamp(LightLevel[1], LightInfo);

   if(LightInfo.rampTargetValue > LightInfo.rampBaseValue)
   {
      Ramp_up = 1;
      Ramp_down = 0;
   }
   else
   {
      Ramp_up = 0;
      Ramp_down = 1;
   }
   CancelAllWait();
   Wait(LightInfo.rampTransitionTime, rampWait)
   {
      Ramp_up = 0;
      Ramp_down = 0;
   }
}

PUSH Toggle_up
{
}

PUSH Toggle_down
{
}

PUSH Hold_up
{
}

RELEASE Hold_up
{
}

PUSH Hold_down
{
}

RELEASE Hold_down
{
}

CHANGE PresetLevel
{
   Ramp(PresetLevel);
}




