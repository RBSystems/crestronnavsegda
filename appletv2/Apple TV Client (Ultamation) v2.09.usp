/*******************************************************************************
 * <module> SIMPL+ Module
 * Copyright (c) Ultamation Limited
 *
 * Ultamation Limited
 * E: info@ultamation.com
 * W: www.ultamation.com
 *
 * Module Summary:
 * 
 * Author:	Joel Kellam
 * Date:	Nov 2018 
 * Info:	For interface details, please read the embedded help file
 *			See #HELP_BEGIN <-> #HELP_END
 *
 ******************************************************************************/

/*******************************************************************************
 * COMPILER DIRECTIVES
 ******************************************************************************/
// ENABLE DYNAMIC
#SYMBOL_NAME "Apple TV Client (Ultamation) v2.09"
#HINT ""
#DEFINE_CONSTANT		ATV_NAME_LEN					64
// #DEFINE_CONSTANT
// #CATEGORY "" 
#DEFAULT_VOLATILE
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT
// #HELP_PDF_FILE "" 
// #DEFAULT_NONVOLATILE
#ENABLE_STACK_CHECKING
//#ENABLE_TRACE

#HELP_BEGIN
AppleTV Remote SIMPL+ Wrapper

Copyright:
This module is the copyright of Ultamation Ltd and
may not be used without the an appropriate licence
issued by Ultamation Ltd.

Summary:
Please refer to the datasheet for detailed integration and usage.

Note:
3-Series ONLY - this module is entirely (apart from this basic wrapper) SIMPL#
Apple may change the API and authentication mechanisms at any time.  Ultamation do not provide any warranty
should Apple make changes which cause this module to stop functioning.
#HELP_END

/*******************************************************************************
 * INCLUDE LIBRARIES
 ******************************************************************************/
#USER_SIMPLSHARP_LIBRARY "MediaRemoteClient"

/*******************************************************************************
 * INPUTS & OUTPUTS
 ******************************************************************************/
DIGITAL_INPUT	_SKIP_,NavUp, NavDown, NavLeft, NavRight, NavSelect, NavMenu, NavTopMenu, NavContextMenu;
DIGITAL_INPUT	_SKIP_, PlayPause, Play, Pause, Stop, Rewind, Forward, Next, Previous;
   
DIGITAL_INPUT	_SKIP_, GestureActive;
ANALOG_INPUT	GestureX#, GestureY#, SetPosition#; 
  
DIGITAL_INPUT   _SKIP_, KeyboardEnter, KeyboardClear, KeyboardBack;
STRING_INPUT	KeyboardText$[255];

// ANALOG_INPUT 
// STRING_INPUT 
// BUFFER_INPUT 

DIGITAL_OUTPUT _SKIP_, Connected_Fb, Verified;

ANALOG_OUTPUT	_SKIP_, Connected_Status#;

STRING_OUTPUT	_SKIP_, Title$;
STRING_OUTPUT	Album$;
STRING_OUTPUT	Artist$;
ANALOG_OUTPUT	Duration#, ElapsedTime#, Position#;

DIGITAL_OUTPUT	_SKIP_, KeyboardActive;
STRING_OUTPUT	KeyBoardFBText$;

DIGITAL_OUTPUT	NowPlayingIsPlaying;
DIGITAL_OUTPUT	NowPlayingIsPaused;

/*******************************************************************************
 * PARAMETERS
 ******************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
STRING_PARAMETER	AppleTvName[ATV_NAME_LEN];

/*******************************************************************************
 * PARAMETER PROPERTIES
 ******************************************************************************/
#BEGIN_PARAMETER_PROPERTIES AppleTvName
	propValidUnits = unitString; 
  	propDefaultValue = "must be set!";
#END_PARAMETER_PROPERTIES

/*******************************************************************************
 * GLOBAL VARIABLES
 * Note:	Be sure to initialize all declared global variables as needed
 *			For example, in Function Main: g_temp = 0;
 * Conventions:
 *			Use a "g_" prefix for all global variables
 ******************************************************************************/
AppleTvClient g_atvClient;
// INTEGER
// LONG_INTEGER
// SIGNED_INTEGER
// SIGNED_LONG_INTEGER
// STRING

/*******************************************************************************
 * EVENT HANDLERS
 ******************************************************************************/
/*
PUSH NavUp { g_atvClient.Up(); }
PUSH NavDown { g_atvClient.Down(); }
PUSH NavLeft { g_atvClient.Left(); }
PUSH NavRight { g_atvClient.Right(); }
RELEASE NavUp, NavDown, NavLeft, NavRight{ g_atvClient.NavRelease(); }
*/

THREADSAFE PUSH NavUp { g_atvClient.Up(); }
THREADSAFE PUSH NavDown { g_atvClient.Down(); }
THREADSAFE PUSH NavLeft { g_atvClient.Left(); }
THREADSAFE PUSH NavRight { g_atvClient.Right(); }
THREADSAFE PUSH NavSelect { g_atvClient.Select(); }

THREADSAFE RELEASE NavUp { wait (1) { g_atvClient.UpRelease(); } }
THREADSAFE RELEASE NavDown { wait (1) { g_atvClient.DownRelease(); } }
THREADSAFE RELEASE NavLeft { wait (1) { g_atvClient.LeftRelease(); } }
THREADSAFE RELEASE NavRight { wait (1) { g_atvClient.RightRelease(); } }
THREADSAFE RELEASE NavSelect { wait (1) { g_atvClient.SelectRelease(); } }

THREADSAFE PUSH NavMenu { g_atvClient.Menu(); }
THREADSAFE PUSH NavTopMenu { g_atvClient.TopMenu(); }
THREADSAFE PUSH NavContextMenu { g_atvClient.ContextMenu(); }

THREADSAFE PUSH PlayPause { g_atvClient.PlayPause(); }
THREADSAFE PUSH Play { g_atvClient.Play(); }
THREADSAFE PUSH Pause { g_atvClient.Pause(); }
THREADSAFE PUSH Stop { g_atvClient.Stop(); }
THREADSAFE PUSH Rewind { g_atvClient.Rewind(); }
THREADSAFE PUSH Forward { g_atvClient.Forward(); }
THREADSAFE PUSH Next { g_atvClient.Next(); }
THREADSAFE PUSH Previous { g_atvClient.Previous(); }

THREADSAFE PUSH KeyboardEnter { g_atvClient.KeyboardEnter(); }
THREADSAFE PUSH KeyboardBack { g_atvClient.KeyboardBack(); }
THREADSAFE PUSH KeyboardClear { g_atvClient.KeyboardClear(); }

THREADSAFE CHANGE KeyboardText$
{
	g_atvClient.KeyboardTextMessage(KeyboardText$);
}
         
PUSH GestureActive
{
	//Began
	WAIT( 30 )
	{
		g_atvClient.GestureDown(GestureX#, GestureY#);	
	} 
}   

THREADSAFE CHANGE GestureX#, GestureY#
{
	//Moved.
	if( GestureActive )
	{
		g_atvClient.GestureMove(GestureX#, GestureY#);
	}		
}

RELEASE GestureActive
{
	//Ended
	WAIT( 40 )
	{
    	g_atvClient.GestureUp(GestureX#, GestureY#);	
	}
}  

CHANGE SetPosition#
{
	g_atvClient.PositionSet(SetPosition#);
}
                                     
CALLBACK FUNCTION OnUpdateSocketStatus( INTEGER status )
{
	Connected_Status# = status;
	if( status = 2 )
		Connected_Fb = on;
	else
		Connected_Fb = off;
}
  
CALLBACK FUNCTION OnUpdatePairingStatus()
{
	Verified = g_atvClient.VerifiedSPLUS;
}

CALLBACK FUNCTION OnUpdatePlayerStatus()
{
	STRING tmp[255];
	STRING tmp1[255];
	STRING tmp2[255];
	
	tmp = g_atvClient.Title;
	Title$ = tmp;

    tmp1 = g_atvClient.Album;
	Album$ = tmp1;
                       
	tmp2 = g_atvClient.Artist;
	Artist$ = tmp2;

	Duration# = g_atvClient.Duration;
    ElapsedTime# = g_atvClient.ElapsedTime;
	Position# = g_atvClient.Position;

    if (g_atvClient.PlayingState = 1)
	{
		NowPlayingIsPlaying = 1;
		NowPlayingIsPaused = 0;
	}
	else if (g_atvClient.PlayingState = 2)
	{
        NowPlayingIsPlaying = 0;
		NowPlayingIsPaused = 1;
	}
	else 
	{
       	NowPlayingIsPlaying = 0;
		NowPlayingIsPaused = 0;
	}
}

CALLBACK FUNCTION OnUpdateKeyboardStatus()
{
	STRING tmp[255];
	tmp = g_atvClient.InputText;
   	KeyBoardFBText$ = tmp;
	KeyboardActive = g_atvClient.KeyboardActiveSPlus;
}

/*******************************************************************************
 * main()
 * This code will get called when the system starts up
 ******************************************************************************/
FUNCTION main()
{
	// Initialize declared global and local variables/arrays as needed.
	RegisterDelegate( g_atvClient, UpdateSocketStatus, OnUpdateSocketStatus );

	// playing Status Update
	RegisterDelegate( g_atvClient, UpdatePairingStatus, OnUpdatePairingStatus );
	RegisterDelegate( g_atvClient, UpdatePlayerStatus, OnUpdatePlayerStatus );
    RegisterDelegate( g_atvClient, UpdateKeyboardStatus, OnUpdateKeyboardStatus );
                                        
	g_atvClient.Initialise( AppleTvName );

	// WaitForInitializationComplete();
	// If you are reading any Input or Output variables, uncomment
	//   the WaitForInitializationComplete statement above and read
	//   them afterwards.  Input/Output variables will not have
	//   their correct values set until after the logic processor
	//   runs and propagates the values to them.
}
